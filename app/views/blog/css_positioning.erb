<article class="article list-container">
      <h2><b>CSS Positioning</b></h2>
      <h5>Dec. 20, 2015</h5>
      <p>Trying to successfully position HTML elements with CSS was consistently the most frustrating task of this past week's <a href ="http://www.devbootcamp.com">DBC</a> workload.  Who knew moving little boxes around on a screen could feel so much like herding cats.  Therefore, I thought I'd take the opportunity to do some further research and, more importantly, deeper thinking to try to wrap my head around the position property, how exactly to make it work for me rather than against me.  First off, let's flesh out some basic definitions so we're all on the same page.</p>
      <p>CSS is used for styling, formatting and positioning various HTML elements on a web page.  CSS takes the content from HTML and manipulates it or, from another viewpoint, adds a further layer of information for the browser to interpret.  The level at which CSS works is the HTML element, which CSS selects using selectors, that are then in turn manipulated using properties and their array of values.</p>
      <p>Every single element on a web page is a block.  This literally means that it is a rectangle of pixels.  This becomes easier to understand when you set the element display: block.  From here you can easily set the height and width of that element.  But, elements that are set to display:inline or inline-block are also rectangles, they just flow into the page differently, lining up horizontally as they are able.  Positioning is used to the blocks of pixels exactly where you want them in relation to each other and the web page as a whole.</p>
      There are four position values:
      <pre>
        <code>
          <i>position: static</i>
          <i>position: relative</i>
          <i>position: absolute</i>
          <i>position: fixed</i>
        </code>
      </pre>
      <h5>Statics</h5>
      <p>This is the default value for every single element.  It means that the element will simply flow into the page as it normally would as dictated by the HTML hierarchy.  Different elements don't have different default positioning values, they all start out as static unless explicitly changed or inherited from a parent.  The only time you would really need to enter a position:static value is to forcefully remove some positioning that got inherited from a parent element. I'm told this is rare since positioning doesn't cascade.</p>
      <h5>Relative</h5>
      <p>This type of positioning is probably the most confusing and most often misused.  It sounds like it would mean relative to other elements or possibly even a parent element, but what it really means is relative to itself.  If you set position:relative to an element but no other positioning properties/values (top/bottom/left/right), it will have no effect at all.  It will be exactly as it would be if you left it as position:static.  But if you do give it some other positioning attributes, such as top:10px, it will shift its position 10 pixels down <i>relative</i> to where it would normally be.  Once you understand what the 'relative' of relative positioning actually refers to, you see that it's fairly straightforward in practice and useful to understand.</p>
      <h5>Absolute</h5>
      <p>This is another very powerful type of position.  It allows you to literally place any page elment exactly where you want it, regardless of the order in which your elements appear in your HTML file.  You can use the positioning attributes top/bottom/left/right to set the location.  These values will, by default, be relative to the next parent element with relative or absolute positioning.  If there aren't any parent elements it will default all the way up to the <html> element, which will then have you positioning your element absolutely relative to the window.  The most important thing to remember about absolute positioining is that absolutely positioned elements are removed from the regular flow of elements on the page.  An element with this type of positioining is not affected by other elements and it doesn't affect other elements.  This is a serious thing to consider when using absolute positioing as its overuse or improper use can limit the overall flexibility of your layouts. </p>
      <h5>Fixed</h5>
      <p>This type of positioning is fairly rare but has its uses.  In fact, I found myself using fixed positioning a fair amount in designing my home and blog pages, though not without a good deal of frustration.  A fixed element is positioned relative to the viewport, or the browser window itself.  The viewport doesn't change when the window is scrolled, so a fixed positioned element will stay right where it is when the page is scrolled.  This can be useful for headers or navigation bars; elements that you as the site designer always want available to your user, even if they are scrolling down a long article page.  One potentially bad trait of fixed positioning is that it becomes more difficult to translate across mobile platforms and different browsers.  It generally has a cool effect and can be useful but needs to be thoroughly tested across platforms.</p>
      <p> Reading about this sort of stuff can be useful if you've already had a few frustrating experiences, but in this case the best way to become more familiar with CSS positioning is to practice and see it work first-hand.  Plan your layouts ahead of time and think through how positioned elements will affect each other.  After you do that, try writing what you know down or explain it to a friend.  I also found <a href ="http://www.barelyfitz.com/screencast/html-training/css/positioning/">this</a> tutorial very helpful.  It's interactive!</p></article>